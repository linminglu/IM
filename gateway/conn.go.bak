package conn

import (
	"bytes"
	"encoding/binary"
	"flag"
	"fmt"
	"io"
	"net"
	"os"
	"os/signal"
	"runtime"
	"strings"
	"syscall"
	"time"

	"github.com/bitly/go-nsq"

	"IM/common"
	//"sirendaou.com/duserver/common/errors"
	sync_ "IM/common/sync"
	"IM/common/syslog"
)

var (
	g_cpu_num = flag.Int("cpu_num", 4, "the num of cpu")
	//	g_isdaemon         = flag.Int("isdaemon", 0, "is run server as daemon 0-no 1-s)")

	g_MyIP       = flag.String("myip", "127.0.0.1", "Server address (transient)")
	g_ListenPort = flag.Int("port", 9100, "Server address (transient)")

	g_log_path  = flag.String("log_path", "/tmp/", "the log file path directory")
	g_log_file  = flag.String("log_file", "tcpinterface.log", "the log file name")
	g_log_level = flag.Int("log_level", 2, "the log level 1-debug 2-info(default) 3-WARN 4-error 5-FATAL 6-off")

	g_nsqd_addrs = flag.String("nsq_addr", "", "nsq Server address (transient)")

	//	g_nsqdTopic        = flag.String("topic", "", "nsq Server topic")
	//	g_nsqdChannel      = flag.String("nsqchannel", "", "nsq custom channel")
	g_Conn2DbTopic     = flag.String("conn2db_topic", "t-conn2db", "the name of connect to db topic")
	g_Conn2StatTopic   = flag.String("conn2stat_topic", "t-conn2statcenter", "the name of connect to status center")
	g_Conn2TeamTopic   = flag.String("conn2team_topic", "t-conn2team", "the name of connect to team topic")
	g_Conn2MsgSvrTopic = flag.String("conn2msg_topic", "t-conn2msg_server", "the name of connect to msg_server topic")
	g_sysLogTopic      = flag.String("syslog_topic", "sysLogTopic", "the name of connect to syslog_server topic")
)

type ConnHandler struct {
	count     int
	clientMap map[uint32]*Client
}

func (h *ConnHandler) HandleMessage(message *nsq.Message) error {
	h.count++

	ret, head, _, tail := common.DecPkgInnerBody(message.Body)

	logger.Info("HandleMessage Cmd:", head.Cmd, "head.Uid", head.Uid, "head.Sid:", head.Sid)

	if ret != 0 {
		logger.Error("DecPkgInnerBody fail ret ", ret)
		return nil
	}

	//resp to client
	client, ok := h.clientMap[(tail.Sid)]
	if !ok {
		logger.Info("HandleMessage Sid ", tail.Sid, " can not find")
		return nil
	}

	select {
	default:
	case client.RespMsgCh <- message.Body:
		logger.Info("HandleMessage", tail.Sid)
	}

	return nil
}

type Service struct {
	connCh    chan *net.TCPConn
	reqMsgCh  chan []byte
	synStatCh chan common.InnerPkgTail
	waitGroup *sync_.WaitGroup
}

func (s *Service) Accept(listener *net.TCPListener) {
	s.waitGroup.Add(1)
	defer s.waitGroup.Done()

	exitNotify := s.waitGroup.ExitNotify()
	for {
		select {
		case <-exitNotify:
			logger.Info("stopping listening on", listener.Addr())
			listener.Close()
			return
		default:
		}

		listener.SetDeadline(time.Now().Add(time.Millisecond * 20))

		conn, err := listener.AcceptTCP()
		if err != nil {
			if opErr, ok := err.(*net.OpError); ok && opErr.Timeout() {
				continue
			}
			logger.Info("Unknow Net Error")
			return
		}

		s.connCh <- conn
	}
}

func (s *Service) Serve(listener *net.TCPListener) {
	s.waitGroup.Add(1)
	defer s.waitGroup.Done()

	// 开启一个协程接收链接
	go s.Accept(listener)

	// TODO sid 超出最大值处理
	exitNotify := s.waitGroup.ExitNotify()

	var sid uint32 = 10000

	for {
		select {
		case <-exitNotify:
			logger.Info("stopping conn_server")
			return
		case conn := <-s.connCh:
			syslog.Info(conn.RemoteAddr(), "connected, sessionId:", sid)

			// 建立客户端
			client := &Client{
				Conn:      conn,
				Uid:       0,
				Sid:       sid,
				Stat:      0,
				ReqMsgCh:  s.reqMsgCh,
				RespMsgCh: make(chan []byte, 1000),
				synStatCh: s.synStatCh,
				waitGroup: sync_.NewWaitGroup(),
			}

			// 处理客户端请求
			go client.Handle()

			g_ClientMap[sid] = client
			sid++ // increase sid
		}
	}
}

func (s *Service) Stop() {
	s.waitGroup.Wait()
}

var g_ClientMap map[uint32]*Client = map[uint32]*Client{}

type Client struct {
	Conn      net.Conn
	Uid       uint64
	Sid       uint32
	Stat      uint32
	ReqMsgCh  chan []byte
	RespMsgCh chan []byte
	synStatCh chan common.InnerPkgTail
	waitGroup *sync_.WaitGroup
}

func (c *Client) Stop() {
	logger.Info("client ", c.Uid, "Sid ", c.Sid, " disconnect!!", c.Conn.RemoteAddr())

	c.waitGroup.Wait()

	c.Conn.Close()

	// clean from client map
	delete(g_ClientMap, c.Sid)

	if c.Uid <= 0 {
		return
	}

	//通知状态中心
	c.synStatCh <- common.InnerPkgTail{0, 0, c.Uid, 0, c.Sid, 0}
}

func (c *Client) Handle() {
	errCode := 0

	defer c.Stop()

	go c.Respone()

	lastTime := time.Now().Unix()

	stIp := net.ParseIP(*g_MyIP)
	nIp := common.InetAton(stIp)

	pkgTail := common.InnerPkgTail{
		ConnIP:   int64(nIp),
		ConnPort: uint32(*g_ListenPort),
		FromUid:  c.Uid,
		ToUid:    0,
		Sid:      c.Sid,
		MsgId:    0,
	}

	netHead := make([]byte, 2)
	for {
		c.Conn.SetDeadline(time.Now().Add(time.Millisecond * 10))

		netHead[0] = 0
		netHead[1] = 0

		if _, err := io.ReadFull(c.Conn, netHead[:2]); err != nil {
			if opErr, ok := err.(*net.OpError); ok && opErr.Timeout() {
				// 太长时间没有交互退出
				if c.Stat == 0 && lastTime+common.CONN_NOLOGIN_TIMEOUT < time.Now().Unix() {
					logger.Info(c.Uid, c.Sid, "no login timeout 330 s, lastTime:", lastTime, " nowTime:", time.Now().Unix())
					errCode = common.ERR_CODE_TIMEOUT
					break
				} else if lastTime+common.CONN_TIMEOUT < time.Now().Unix() {
					logger.Info(c.Uid, c.Sid, "timeout 100 s, lastTime:", lastTime, " nowTime:", time.Now().Unix())
					errCode = common.ERR_CODE_TIMEOUT
					break
				}
				// 没有请求
				continue
			} else if !ok {
				logger.Info(c.Uid, c.Sid, "recv error:", err.Error())
				errCode = common.ERR_CODE_NET
				break
			}
		} else {
			headLen := binary.BigEndian.Uint16([]byte(netHead))

			logger.Debug(c.Uid, c.Sid, "head len :", headLen)

			if headLen > 2048 {
				logger.Info(c.Uid, c.Sid, "head len :", headLen, " too large")
				break
			} else if headLen < 24 {
				logger.Info(c.Uid, c.Sid, "head len :", headLen, " too small")
				break
			}

			reqBuf := make([]byte, int(headLen))
			reqBuf[0] = netHead[0]
			reqBuf[1] = netHead[1]
			c.Conn.SetDeadline(time.Now().Add(time.Second * 3))
			if _, err := io.ReadFull(c.Conn, reqBuf[2:]); err != nil {
				logger.Info(c.Uid, c.Sid, "recv error:", err)
				errCode = common.ERR_CODE_NET
				break
			}

			ret, head := common.DecPkgBody(reqBuf)
			if ret != 0 {
				logger.Info(c.Uid, c.Sid, "DecPkgBody fail :", ret)
				break
			}

			if (head.Cmd != common.DU_CMD_USER_PURE_REGISTERLOGIN && head.Cmd != common.DU_CMD_USER_LOGIN && head.Cmd != common.DU_CMD_USER_REGISTER && head.Cmd != common.DU_CMD_USER_RETRIEVE_PWD) &&
				(head.Uid != c.Uid || head.Sid != c.Sid) {
				logger.Info(c.Uid, c.Sid, "drop Pkg Cmd:", head.Cmd, "head.Uid", head.Uid, "c.Uid", c.Uid, "head.Sid:", head.Sid, "c.Sid", c.Sid)
				break
			} else {
				lastTime = time.Now().Unix()
				buf := new(bytes.Buffer)
				binary.Write(buf, binary.BigEndian, reqBuf[:])
				binary.Write(buf, binary.BigEndian, pkgTail)

				logger.Debug("=====================client request=====================\n", buf.String())
				if head.Cmd != common.DU_CMD_USER_HELLO {
					//派发消息到其它服务器处理
					c.ReqMsgCh <- buf.Bytes()
				} else {
					//心跳消息直接回复
					syncTail := common.InnerPkgTail{
						ConnIP:   int64(nIp),
						ConnPort: uint32(*g_ListenPort),
						FromUid:  c.Uid,
						ToUid:    2, /*2 - trigger msgdb*/
						Sid:      c.Sid,
						MsgId:    0,
					}
					//派发Stat服务
					c.synStatCh <- syncTail
					//回复心跳
					c.RespMsgCh <- buf.Bytes()
				}
			}
		}
	}

	logger.Info("client exit code:", errCode, " addr:", c.Conn.RemoteAddr())
}

func (c *Client) Respone() {
	c.waitGroup.Add(1)

	defer c.waitGroup.Done()

	for {
		select {
		// TODO 超时处理
		case <-c.waitGroup.ExitNotify():
			return
		// wait for respMsg
		case respMsg := <-c.RespMsgCh:
			ret, head, jsonStr, tail := common.DecPkgInnerBody(respMsg)
			if ret != 0 {
				logger.Info("DecPkgInnerBody fail ,ret ", ret)
				return
			}

			logger.Debug("head:", head.ToString())
			logger.Debug("tail:", tail.ToString())
			logger.Debug("jsonStr:", string(jsonStr[:]))

			if (head.Cmd == common.DU_CMD_USER_LOGIN || head.Cmd == common.DU_CMD_USER_REGISTER || head.Cmd == common.DU_CMD_USER_PURE_REGISTERLOGIN) && head.Sid == 0 {
				c.Uid = head.Uid
				tail.FromUid = c.Uid
				tail.Sid = c.Sid
				tail.ToUid = 1 //online stat
				c.Stat = 1

				c.synStatCh <- tail
			}

			if head.Cmd == common.DU_CMD_USER_HELLO {
				head.Sid = 0
			}

			buf := new(bytes.Buffer)
			binary.Write(buf, binary.BigEndian, head)
			binary.Write(buf, binary.BigEndian, respMsg[common.SIZEOF_PKGHEAD:len(respMsg)-common.SIZEOF_INNERTAIL])

			// write to Conn
			c.Conn.SetDeadline(time.Now().Add(time.Second))
			_, err := c.Conn.Write(buf.Bytes())

			if err != nil {
				logger.Error("write to conn fail :", err.Error())
			} else {
				logger.Debug("write to conn success ", "c.Conn.RemoteAddr()", c.Conn.RemoteAddr())
				logger.Debug("write to conn success ", "head=", head.ToString())
				logger.Debug("write to conn success body:", string(respMsg[common.SIZEOF_PKGHEAD:len(respMsg)-common.SIZEOF_INNERTAIL]))
				syslog.Debug("write to conn success, msg:", buf.String())
			}

			//			if head.Cmd == common.DU_PUSH_CMD_USER_LOGIN_CONFLICT {
			//				errCode = common.DU_PUSH_CMD_USER_LOGIN_CONFLICT
			//				time.Sleep(time.Second)
			//				break
			//			}
		}
	}
}

func Produce(reqMsgCh chan []byte) {
	addrs := strings.Split(*g_nsqd_addrs, ",")

	producerCount := len(addrs)
	producers := make([]*nsq.Producer, producerCount)

	var err error
	for i, add := range addrs {
		config := nsq.NewConfig()
		config.DefaultRequeueDelay = 0
		producers[i], err = nsq.NewProducer(add, config)
		if err != nil {
			logger.Warn("NewProducer  ", add, " err:", err)
			return
		}
	}

	defer func() {
		for _, producer := range producers {
			producer.Stop()
		}
	}()

	count := uint64(0)
	for {
		select {
		case msg := <-reqMsgCh:
			count++

			reader := bytes.NewReader(msg)

			head := common.PkgHead{}
			err := binary.Read(reader, binary.BigEndian, &head)
			if err != nil {
				logger.Info("read pkghead fail:", err.Error())
				break
			}

			logger.Info("===================HandleRequest head========================\n", head)

			if (head.Cmd >= common.DU_CMD_TEAM_CREATE && head.Cmd < common.DU_CMD_TEAM_END) ||
				head.Cmd == common.DU_CMD_IM_SEND_TEAM_MSG || head.Cmd == common.DU_CMD_IM_TEAM_MSG_RECEIVED {
				err = producers[int(count)%producerCount].Publish(*g_Conn2TeamTopic, msg)
				logger.Debug("------------ Publish", *g_Conn2TeamTopic, string(msg))
				syslog.Debug("Publish:", *g_Conn2TeamTopic, " msg:", string(msg))
			} else if head.Cmd == common.DU_CMD_IM_SEND_USER_MSG || head.Cmd == common.DU_CMD_IM_USER_MSG_RECEIVED {
				err = producers[int(count)%producerCount].Publish(*g_Conn2MsgSvrTopic, msg)
				logger.Debug("------------ Publish", *g_Conn2MsgSvrTopic, string(msg))
				syslog.Debug("Publish:", *g_Conn2MsgSvrTopic, " msg:", string(msg))
			} else {
				// publish to *g_Conn2DbTopic
				err = producers[int(count)%producerCount].Publish(*g_Conn2DbTopic, msg)
				logger.Debug("------------ Publish", *g_Conn2DbTopic, string(msg))
				syslog.Debug("Publish:", *g_Conn2DbTopic, " msg:", string(msg))
			}

			if err != nil {
				logger.Warn("Publish fail :", err.Error(), " msg:", string(msg))
				syslog.Warn("Publish fail :", err.Error(), " msg:", string(msg))
			} else {
				logger.Debug("Publish success")
			}
		}
	}
}

func Consume(clientMap map[uint32]*Client) {
	for {
		config := nsq.NewConfig()
		config.DefaultRequeueDelay = 0

		topic := fmt.Sprintf("conn_%s_%d", *g_MyIP, *g_ListenPort)

		consumer, err := nsq.NewConsumer(topic, "conn-channel", config)

		if err != nil {
			logger.Warn("NewConsumer err:", err.Error())
			time.Sleep(time.Second * 10)
			continue
		}

		consumer.SetLogger(nil, nsq.LogLevelInfo)

		// consume topic
		handler := &ConnHandler{count: 0, clientMap: clientMap}
		consumer.AddHandler(handler)

		addrs := strings.Split(*g_nsqd_addrs, ",")
		err = consumer.ConnectToNSQDs(addrs)

		if err != nil {
			consumer.Stop()
			logger.Warn("ConnectToNSQ err:", err.Error())
			time.Sleep(time.Second * 10)
			continue
		}

		select {
		case <-consumer.StopChan:
			logger.Warn("nsq disconect")
		}

		consumer.Stop()
		time.Sleep(time.Second * 10)

		continue
	}
}

func Sync2Stat(synStatCh chan common.InnerPkgTail) {
	addrs := strings.Split(*g_nsqd_addrs, ",")

	producerCount := len(addrs)
	producers := make([]*nsq.Producer, producerCount)

	var err error
	for i, add := range addrs {
		config := nsq.NewConfig()
		config.DefaultRequeueDelay = 0
		producers[i], err = nsq.NewProducer(add, config)

		if err != nil {
			logger.Warn("NewProducer  ", add, " err:", err)
			return
		}
	}

	defer func() {
		for _, writer := range producers {
			writer.Stop()
		}
	}()

	count := uint64(0)

	for {
		select {
		case info := <-synStatCh:
			count++
			syncStatBuf := new(bytes.Buffer)
			err := binary.Write(syncStatBuf, binary.BigEndian, info)
			if err != nil {
				logger.Warn("write tail fail:", err.Error())
			} else {
				err = producers[int(count)%producerCount].Publish(*g_Conn2StatTopic, syncStatBuf.Bytes())

				if err != nil {
					logger.Warn("Sync2Stat Publish Failed, topic:", *g_Conn2StatTopic, "err:", err.Error(), " info:", info)
				} else {
					logger.Debug("Sync2Stat Publish Success, topic:", *g_Conn2TeamTopic, "info:", info)
				}
			}
		}
	}

	return
}

func syslogInit() {
	config := &syslog.Config{
		NsqdAddrs: *g_nsqd_addrs,
		LogTopic:  *g_sysLogTopic,
		ModelName: "conn_server",
		LogLevel:  syslog.ALL_LEVEL,
	}
	if err := syslog.SysLogInit(config); err != nil {
		logger.Info("syslog_init failed", err)
	}
	syslog.Info("syslog init success!")
}

func StartServer() {
	if len(os.Args) < 2 {
		fmt.Println("please set conf file ")
		return
	}

	conf, err := globalconf.NewWithOptions(&globalconf.Options{
		Filename: os.Args[1],
	})

	if err != nil {
		fmt.Print("NewWithFilename ", os.Args[1], " fail :", err)
		return
	}

	conf.ParseAll()

	runtime.GOMAXPROCS(*g_cpu_num)

	//syslog init
	syslogInit()

	Port := *g_ListenPort

	listenPort := fmt.Sprintf("%d", Port)

	if Port == 0 {
		return
	}

	addr, err := net.ResolveTCPAddr("tcp", ":"+listenPort)
	if err != nil {
		logger.Error(err)
		return
	}

	listener, err := net.ListenTCP("tcp", addr)
	if err != nil {
		logger.Error(err)
		panic(err)
		return
	}

	syslog.Info("StartServer listening on", listener.Addr())
	logger.Info("StartServer listening on", listener.Addr())

	// Make a new service and send it into the background.

	//	if i < 8 {
	//	for i := 0; i < 2; i++ {
	go Consume(g_ClientMap)
	//	}

	sync2StatCh := make(chan common.InnerPkgTail, 1000)
	go Sync2Stat(sync2StatCh)

	reqMsgCh := make(chan []byte, 1000)
	go Produce(reqMsgCh)

	service := &Service{
		connCh:    make(chan *net.TCPConn, 10000),
		reqMsgCh:  reqMsgCh,
		synStatCh: sync2StatCh,
		waitGroup: sync_.NewWaitGroup(),
	}

	go service.Serve(listener)

	// Handle SIGINT and SIGTERM.
	ch := make(chan os.Signal)

	signal.Notify(ch, syscall.SIGINT, syscall.SIGTERM, syscall.SIGKILL)
	logger.Info("recv signal:", <-ch)
	syslog.Info("recv signal exit")

	// Stop the service gracefully.
	service.Stop()
	syslog.SysLogDeinit()
	return
}
