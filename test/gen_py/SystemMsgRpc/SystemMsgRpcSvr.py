#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def SendSysMsgToCids(self, Appkey, Vercode, CidList, Title, MsgContent):
    """
    Parameters:
     - Appkey
     - Vercode
     - CidList
     - Title
     - MsgContent
    """
    pass

  def SendSysMsgToAppkey(self, Appkey, Vercode, Title, MsgContent):
    """
    Parameters:
     - Appkey
     - Vercode
     - Title
     - MsgContent
    """
    pass

  def SendSysMsgToTeam(self, Appkey, Vercode, TeamID, Title, MsgContent):
    """
    Parameters:
     - Appkey
     - Vercode
     - TeamID
     - Title
     - MsgContent
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def SendSysMsgToCids(self, Appkey, Vercode, CidList, Title, MsgContent):
    """
    Parameters:
     - Appkey
     - Vercode
     - CidList
     - Title
     - MsgContent
    """
    self.send_SendSysMsgToCids(Appkey, Vercode, CidList, Title, MsgContent)
    return self.recv_SendSysMsgToCids()

  def send_SendSysMsgToCids(self, Appkey, Vercode, CidList, Title, MsgContent):
    self._oprot.writeMessageBegin('SendSysMsgToCids', TMessageType.CALL, self._seqid)
    args = SendSysMsgToCids_args()
    args.Appkey = Appkey
    args.Vercode = Vercode
    args.CidList = CidList
    args.Title = Title
    args.MsgContent = MsgContent
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_SendSysMsgToCids(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = SendSysMsgToCids_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "SendSysMsgToCids failed: unknown result");

  def SendSysMsgToAppkey(self, Appkey, Vercode, Title, MsgContent):
    """
    Parameters:
     - Appkey
     - Vercode
     - Title
     - MsgContent
    """
    self.send_SendSysMsgToAppkey(Appkey, Vercode, Title, MsgContent)
    return self.recv_SendSysMsgToAppkey()

  def send_SendSysMsgToAppkey(self, Appkey, Vercode, Title, MsgContent):
    self._oprot.writeMessageBegin('SendSysMsgToAppkey', TMessageType.CALL, self._seqid)
    args = SendSysMsgToAppkey_args()
    args.Appkey = Appkey
    args.Vercode = Vercode
    args.Title = Title
    args.MsgContent = MsgContent
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_SendSysMsgToAppkey(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = SendSysMsgToAppkey_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "SendSysMsgToAppkey failed: unknown result");

  def SendSysMsgToTeam(self, Appkey, Vercode, TeamID, Title, MsgContent):
    """
    Parameters:
     - Appkey
     - Vercode
     - TeamID
     - Title
     - MsgContent
    """
    self.send_SendSysMsgToTeam(Appkey, Vercode, TeamID, Title, MsgContent)
    return self.recv_SendSysMsgToTeam()

  def send_SendSysMsgToTeam(self, Appkey, Vercode, TeamID, Title, MsgContent):
    self._oprot.writeMessageBegin('SendSysMsgToTeam', TMessageType.CALL, self._seqid)
    args = SendSysMsgToTeam_args()
    args.Appkey = Appkey
    args.Vercode = Vercode
    args.TeamID = TeamID
    args.Title = Title
    args.MsgContent = MsgContent
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_SendSysMsgToTeam(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = SendSysMsgToTeam_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "SendSysMsgToTeam failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["SendSysMsgToCids"] = Processor.process_SendSysMsgToCids
    self._processMap["SendSysMsgToAppkey"] = Processor.process_SendSysMsgToAppkey
    self._processMap["SendSysMsgToTeam"] = Processor.process_SendSysMsgToTeam

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_SendSysMsgToCids(self, seqid, iprot, oprot):
    args = SendSysMsgToCids_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = SendSysMsgToCids_result()
    result.success = self._handler.SendSysMsgToCids(args.Appkey, args.Vercode, args.CidList, args.Title, args.MsgContent)
    oprot.writeMessageBegin("SendSysMsgToCids", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_SendSysMsgToAppkey(self, seqid, iprot, oprot):
    args = SendSysMsgToAppkey_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = SendSysMsgToAppkey_result()
    result.success = self._handler.SendSysMsgToAppkey(args.Appkey, args.Vercode, args.Title, args.MsgContent)
    oprot.writeMessageBegin("SendSysMsgToAppkey", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_SendSysMsgToTeam(self, seqid, iprot, oprot):
    args = SendSysMsgToTeam_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = SendSysMsgToTeam_result()
    result.success = self._handler.SendSysMsgToTeam(args.Appkey, args.Vercode, args.TeamID, args.Title, args.MsgContent)
    oprot.writeMessageBegin("SendSysMsgToTeam", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class SendSysMsgToCids_args:
  """
  Attributes:
   - Appkey
   - Vercode
   - CidList
   - Title
   - MsgContent
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Appkey', None, None, ), # 1
    (2, TType.STRING, 'Vercode', None, None, ), # 2
    (3, TType.LIST, 'CidList', (TType.STRING,None), None, ), # 3
    (4, TType.STRING, 'Title', None, None, ), # 4
    (5, TType.STRING, 'MsgContent', None, None, ), # 5
  )

  def __init__(self, Appkey=None, Vercode=None, CidList=None, Title=None, MsgContent=None,):
    self.Appkey = Appkey
    self.Vercode = Vercode
    self.CidList = CidList
    self.Title = Title
    self.MsgContent = MsgContent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Vercode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.CidList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.CidList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.Title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.MsgContent = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SendSysMsgToCids_args')
    if self.Appkey is not None:
      oprot.writeFieldBegin('Appkey', TType.STRING, 1)
      oprot.writeString(self.Appkey)
      oprot.writeFieldEnd()
    if self.Vercode is not None:
      oprot.writeFieldBegin('Vercode', TType.STRING, 2)
      oprot.writeString(self.Vercode)
      oprot.writeFieldEnd()
    if self.CidList is not None:
      oprot.writeFieldBegin('CidList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.CidList))
      for iter6 in self.CidList:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.Title is not None:
      oprot.writeFieldBegin('Title', TType.STRING, 4)
      oprot.writeString(self.Title)
      oprot.writeFieldEnd()
    if self.MsgContent is not None:
      oprot.writeFieldBegin('MsgContent', TType.STRING, 5)
      oprot.writeString(self.MsgContent)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SendSysMsgToCids_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SendSysMsgToCids_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SendSysMsgToAppkey_args:
  """
  Attributes:
   - Appkey
   - Vercode
   - Title
   - MsgContent
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Appkey', None, None, ), # 1
    (2, TType.STRING, 'Vercode', None, None, ), # 2
    (3, TType.STRING, 'Title', None, None, ), # 3
    (4, TType.STRING, 'MsgContent', None, None, ), # 4
  )

  def __init__(self, Appkey=None, Vercode=None, Title=None, MsgContent=None,):
    self.Appkey = Appkey
    self.Vercode = Vercode
    self.Title = Title
    self.MsgContent = MsgContent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Vercode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.Title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.MsgContent = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SendSysMsgToAppkey_args')
    if self.Appkey is not None:
      oprot.writeFieldBegin('Appkey', TType.STRING, 1)
      oprot.writeString(self.Appkey)
      oprot.writeFieldEnd()
    if self.Vercode is not None:
      oprot.writeFieldBegin('Vercode', TType.STRING, 2)
      oprot.writeString(self.Vercode)
      oprot.writeFieldEnd()
    if self.Title is not None:
      oprot.writeFieldBegin('Title', TType.STRING, 3)
      oprot.writeString(self.Title)
      oprot.writeFieldEnd()
    if self.MsgContent is not None:
      oprot.writeFieldBegin('MsgContent', TType.STRING, 4)
      oprot.writeString(self.MsgContent)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SendSysMsgToAppkey_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SendSysMsgToAppkey_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SendSysMsgToTeam_args:
  """
  Attributes:
   - Appkey
   - Vercode
   - TeamID
   - Title
   - MsgContent
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'Appkey', None, None, ), # 1
    (2, TType.STRING, 'Vercode', None, None, ), # 2
    (3, TType.I64, 'TeamID', None, None, ), # 3
    (4, TType.STRING, 'Title', None, None, ), # 4
    (5, TType.STRING, 'MsgContent', None, None, ), # 5
  )

  def __init__(self, Appkey=None, Vercode=None, TeamID=None, Title=None, MsgContent=None,):
    self.Appkey = Appkey
    self.Vercode = Vercode
    self.TeamID = TeamID
    self.Title = Title
    self.MsgContent = MsgContent

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.Appkey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.Vercode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.TeamID = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.Title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.MsgContent = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SendSysMsgToTeam_args')
    if self.Appkey is not None:
      oprot.writeFieldBegin('Appkey', TType.STRING, 1)
      oprot.writeString(self.Appkey)
      oprot.writeFieldEnd()
    if self.Vercode is not None:
      oprot.writeFieldBegin('Vercode', TType.STRING, 2)
      oprot.writeString(self.Vercode)
      oprot.writeFieldEnd()
    if self.TeamID is not None:
      oprot.writeFieldBegin('TeamID', TType.I64, 3)
      oprot.writeI64(self.TeamID)
      oprot.writeFieldEnd()
    if self.Title is not None:
      oprot.writeFieldBegin('Title', TType.STRING, 4)
      oprot.writeString(self.Title)
      oprot.writeFieldEnd()
    if self.MsgContent is not None:
      oprot.writeFieldBegin('MsgContent', TType.STRING, 5)
      oprot.writeString(self.MsgContent)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SendSysMsgToTeam_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SendSysMsgToTeam_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
